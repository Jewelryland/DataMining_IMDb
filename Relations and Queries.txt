MiningTask1: 
Number of males/ females - actors, directors, actresses 
SELECT distinct n.gender, n.name, r.role from name n INNER JOIN cast_info c ON n.id = c.person_id INNER JOIN role_type r ON r.id = c.role_id where n.gender is not null; 

MiningTask2: 
Average / max / min number of movies dependent on gender?
SELECT distinct n.gender, n.name, r.role, t.title  
from name n INNER JOIN cast_info c ON n.id = c.person_id INNER JOIN role_type r ON r.id = c.role_id INNER JOIN title t ON t.id = c.movie_id where n.gender is not null limit 2000000; 


MiningTask3: 
SELECT distinct n.gender, n.name, r.role, t.title, t.production_year
from name n INNER JOIN cast_info c ON n.id = c.person_id 
INNER JOIN role_type r ON r.id = c.role_id 
INNER JOIN title t ON t.id = c.movie_id 
INNER JOIN movie_info m ON m.id = t.id 
where n.gender is not null and t.production_year is not null limit 2000000 
INTO OUTFILE '/usr/local/DbOutput/MiningTask3.csv' FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n';


MiningTask4: 
Number of companies (distribution/ production, etc.) for each country
select distinct cn.country_code, ct.kind 
from company_name cn inner join mc.id 
on ct.id = mc.company_type_id
inner join company_name cn 
on cn.id = mc.company_id;

MiningTask5: 
Which company has produced/ distributed most number of movies - which country is it from ?
select distinct cn.country_code, t.title
from company_name cn inner join movie_companies  mc
on cn.id = mc.company_id
inner join title t
on mc.movie_id = t.id;


MiningTask8: 
identifying which movie genres are most popular in what decades/ years
SELECT distinct M.INFO, T.PRODUCTION_YEAR,T.SERIES_YEARS 
FROM movie_info M  INNER JOIN title T ON M.MOVIE_ID = T.ID WHERE M.INFO_TYPE_ID = 3 and t.production_year is not null and t.series_years is not null  
ORDER BY T.PRODUCTION_YEAR, T.SERIES_YEARS,M.INFO INTO OUTFILE '/usr/local/DbOutput/MiningTask8.csv' FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n';


MiningTask10:
cluster tv series (number/ genre)
SELECT distinct M.INFO,K.KIND,T.TITLE
FROM movie_info M JOIN title T JOIN kind_type K
ON M.MOVIE_ID = T.ID AND K.ID = T.KIND_ID
WHERE M.INFO_TYPE_ID = 3 AND T.KIND_ID IN (7,5,2)
ORDER BY M.INFO;


MiningTask11:
Identify the gross by using the budget info type
SELECT distinct M.INFO, T.TITLE
FROM movie_info M JOIN title T
ON M.MOVIE_ID = T.ID
WHERE M.INFO_TYPE_ID = 107
ORDER BY M.INFO DESC;


MiningTask12:
Find which genre movies are translated into other languages the most (use link_type id = 17 ... alternate language version of)
select distinct t1.title,t2.title,m.info 
from movie_link l,title t1,title t2,movie_info m
 where link_type_id = 17 
 and t1.id = linked_movie_id 
 and t2.id = l.movie_id 
 and m.info_type_id = 3 
 and m.movie_id = t2.id 
 order by t2.title;


MiningTask13:
Find movie budget via info_type_id = 105
SELECT distinct M.INFO, T.TITLE
FROM movie_info M JOIN title T
ON M.MOVIE_ID = T.ID
WHERE M.INFO_TYPE_ID = 105
ORDER BY M.INFO DESC;


MiningTask14:
Movies which have both budget and gross as info.
select count(movie_id) from movie_info where movie_id in (select movie_id from movie_info where info_type_id=107) and info_type_id=105;

SELECT distinct M.INFO,M1.INFO, T.TITLE
FROM movie_info M, movie_info M1, title T
WHERE M.MOVIE_ID = T.ID AND M1.MOVIE_ID = M.MOVIE_ID AND
M.INFO_TYPE_ID = 105 AND M1.INFO_TYPE_ID = 107
ORDER BY T.TITLE DESC;

MiningTask15:
Distribution of movie runtime year wise and genre wise.

Gives runtime of movies
select distinct movie_id, info from movie_info where info_type_id=1 order by movie_id



select distinct t.id, t.production_year, m1.info, m2.info from title t, movie_info m1, 
movie_info m2 where m1.info_type_id = 1 and m2.info_type_id = 3 and 
m1.movie_id = t.id and m1.movie_id = m2.movie_id


| id | kind           |
+----+----------------+
|  1 | movie          |
|  2 | tv series      |
|  3 | tv movie       |
|  4 | video movie    |
|  5 | tv mini series |
|  6 | video game     |
|  7 | episode        |

to give only movies (and eliminating tv series... ) :

select distinct t.id, t.production_year, m1.info, m2.info from title t, movie_info m1, 
movie_info m2 where m1.info_type_id = 1 and m2.info_type_id = 3 and 
m1.movie_id = t.id and m1.movie_id = m2.movie_id and t.kind_id in (1, 3, 4)

for episodes(can add 2, 5 if its data makes sense) :

select distinct t.id, t.production_year, m1.info, m2.info from title t, movie_info m1, 
movie_info m2 where m1.info_type_id = 1 and m2.info_type_id = 3 and 
m1.movie_id = t.id and m1.movie_id = m2.movie_id and t.kind_id in (7) 


Mining task 3 (modification??)

select t.production_year, k.kind from title t join kind_type k on t.kind_id = k.id

SELECT distinct n.gender,r.role,t.production_year,k.kind
from name n INNER JOIN cast_info c ON n.id = c.person_id 
INNER JOIN role_type r ON r.id = c.role_id 
INNER JOIN title t ON t.id = c.movie_id 
INNER JOIN movie_info m ON m.id = t.id 
INNER JOIN kind_type k ON t.kind_id = k.id 



 production_year, country_name,company_name, budget ang gross, rating, genre
 
 SELECT distinct  M1.INFO, M2.INFO, M3.INFO T.PRODUCTION_YEAR,  
FROM company_name cn inner join movie_companies  mc
on cn.id = mc.company_id , movie_info M1, movie_info M2, movie_info M3  INNER JOIN title T ON M1.MOVIE_ID = T.ID AND M1.MOVIE_ID = M.MOVIE_ID WHERE cn.country_code = [us], M1.INFO_TYPE_ID = 3, M2.INFO_TYPE_ID = 105, M3.INFO_TYPE_ID = 107 and t.production_year  is not null 
ORDER BY T.PRODUCTION_YEAR,M.INFO INTO OUTFILE '/usr/local/DbOutput/MiningTask8.csv' FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n';

